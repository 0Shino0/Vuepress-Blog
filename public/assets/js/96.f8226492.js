(window.webpackJsonp=window.webpackJsonp||[]).push([[96],{685:function(t,a,s){"use strict";s.r(a);var r=s(1),e=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"回顾js"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#回顾js"}},[t._v("#")]),t._v(" 回顾js")]),t._v(" "),a("h3",{attrs:{id:"原型protorype和原型链-proto"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型protorype和原型链-proto"}},[t._v("#")]),t._v(" 原型"),a("code",[t._v("protorype")]),t._v("和原型链"),a("code",[t._v("_proto_")])]),t._v(" "),a("h2",{attrs:{id:"配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[t._v("#")]),t._v(" 配置")]),t._v(" "),a("h3",{attrs:{id:"ts安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ts安装"}},[t._v("#")]),t._v(" TS安装")]),t._v(" "),a("h3",{attrs:{id:"ts配置文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ts配置文件"}},[t._v("#")]),t._v(" TS配置文件")]),t._v(" "),a("h3",{attrs:{id:"ts插件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ts插件"}},[t._v("#")]),t._v(" TS插件")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("ts插件")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("ts-node")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td"),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td"),t._v(" "),a("td")])])]),t._v(" "),a("h1",{attrs:{id:"语法入门"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#语法入门"}},[t._v("#")]),t._v(" 语法入门")]),t._v(" "),a("h2",{attrs:{id:"ts-class类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ts-class类"}},[t._v("#")]),t._v(" TS class类")]),t._v(" "),a("h3",{attrs:{id:"简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),a("ul",[a("li",[t._v("类的定义(修饰符)与继承extends")]),t._v(" "),a("li",[t._v("构造函数使用new时会自动执行")]),t._v(" "),a("li",[t._v("类类型接口、接口继承类")])]),t._v(" "),a("h4",{attrs:{id:"class-开头"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#class-开头"}},[t._v("#")]),t._v(" class 开头")]),t._v(" "),a("div",{staticClass:"language-typescript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-typescript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("h4",{attrs:{id:"访问修饰符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#访问修饰符"}},[t._v("#")]),t._v(" 访问修饰符")]),t._v(" "),a("ul",[a("li",[t._v("public: 公开")]),t._v(" "),a("li",[t._v("protected: 可以在本类和子类中访问，不能再类的外部使用")]),t._v(" "),a("li",[t._v("private: 只允许在本类中访问")]),t._v(" "),a("li",[t._v("注意\n"),a("ul",[a("li",[t._v("默认: public")]),t._v(" "),a("li",[t._v("父类方法的访问范围【访问修饰符】必须小于子类中方法重写的访问范围【访问修饰符】")]),t._v(" "),a("li",[t._v("父类方法不能是private")])])])]),t._v(" "),a("h4",{attrs:{id:"构造函数-constructor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构造函数-constructor"}},[t._v("#")]),t._v(" 构造函数 "),a("code",[t._v("constructor")])]),t._v(" "),a("h4",{attrs:{id:"super的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#super的使用"}},[t._v("#")]),t._v(" super的使用")]),t._v(" "),a("ul",[a("li",[t._v("super代表 "),a("strong",[t._v("父类的构造函数名")]),t._v(" 或 "),a("strong",[t._v("父类的类名")])]),t._v(" "),a("li",[t._v('通过"super"关键字只能访问基类的公共方法和受保护方法。')]),t._v(" "),a("li",[t._v("获取 / 重写 父类方法")])]),t._v(" "),a("h4",{attrs:{id:"类类型接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类类型接口"}},[t._v("#")]),t._v(" 类类型接口")]),t._v(" "),a("p",[t._v("interface")]),t._v(" "),a("h4",{attrs:{id:"接口继承类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#接口继承类"}},[t._v("#")]),t._v(" 接口继承类")]),t._v(" "),a("ol",[a("li",[t._v("接口可以继承类,当接口继承了类之后,会继承成员(类型),但是不包括实现;")]),t._v(" "),a("li",[t._v("接口还会继承private和protected修饰的成员,但是这个接口只可被这个类或它的子类实现")])]),t._v(" "),a("p",[a("code",[t._v("interface B extends A{}")])]),t._v(" "),a("ol",[a("li",[t._v("类与类,接口与接口之间使用extends")]),t._v(" "),a("li",[t._v("类与接口, implements")])]),t._v(" "),a("p",[a("code",[t._v("class C implements B{}")])]),t._v(" "),a("h3",{attrs:{id:"重载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重载"}},[t._v("#")]),t._v(" 重载")]),t._v(" "),a("h4",{attrs:{id:"方法重载-methodoverload"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法重载-methodoverload"}},[t._v("#")]),t._v(" 方法重载 (methodoverload)")]),t._v(" "),a("h4",{attrs:{id:"函数重载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数重载"}},[t._v("#")]),t._v(" 函数重载")]),t._v(" "),a("h4",{attrs:{id:"构造器重载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构造器重载"}},[t._v("#")]),t._v(" 构造器重载")]),t._v(" "),a("h3",{attrs:{id:"多态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多态"}},[t._v("#")]),t._v(" 多态")]),t._v(" "),a("h2",{attrs:{id:"断言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#断言"}},[t._v("#")]),t._v(" 断言")]),t._v(" "),a("p",[t._v("as")]),t._v(" "),a("h4",{attrs:{id:"类型断言中的不能相互重叠问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型断言中的不能相互重叠问题"}},[t._v("#")]),t._v(" 类型断言中的不能相互重叠问题:")]),t._v(" "),a("ul",[a("li",[t._v("两个类之间断言的规则:\n"),a("ul",[a("li",[t._v("两个类中任意一个的属性和方法是另一个类的属性和方法完全相同或子集，则这两个类可以相互断言")]),t._v(" "),a("li",[t._v("否则这两个类就不能相互断言")])])]),t._v(" "),a("li",[t._v("任何数据类型都可以转换成any 或unknown类型")])]),t._v(" "),a("h4",{attrs:{id:"适用性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#适用性"}},[t._v("#")]),t._v(" 适用性")]),t._v(" "),a("ul",[a("li",[t._v("对象中的Symbol数据类型取值问题")]),t._v(" "),a("li",[t._v("加法计算,巧用as any。")])]),t._v(" "),a("h2",{attrs:{id:"ts类型守卫"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ts类型守卫"}},[t._v("#")]),t._v(" TS类型守卫")]),t._v(" "),a("ul",[a("li",[t._v("类型判断: "),a("code",[t._v("typeof")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("typeof")]),t._v(' 检测变量的类型范围包括：  “string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function" 等数据类型。')]),t._v(" "),a("li",[a("code",[t._v("typeof")]),t._v("的局限性\n"),a("ul",[a("li",[t._v("检测"),a("code",[t._v("null")]),t._v(": "),a("code",[t._v("typeof null")]),t._v(" 的结果是 "),a("code",[t._v("object")])]),t._v(" "),a("li",[t._v("检测数组变量: "),a("code",[t._v("typeof []")]),t._v(" 的结果是 "),a("code",[t._v("object")])]),t._v(" "),a("li",[t._v("检测"),a("code",[t._v("Set")]),t._v(" "),a("code",[t._v("Map")]),t._v("变量:  结果也是 "),a("code",[t._v("object")])])])]),t._v(" "),a("li",[t._v("替代方案 "),a("code",[t._v("Object.protorype.toString.call()")]),t._v(" "),a("ul",[a("li",[t._v("依然无法解决的问题:无法获取一个自定义的类的实例变量或构造函数的对象变量的真正创建类型，答案是使用 instanceof 来解决。")])])])])]),t._v(" "),a("li",[t._v("属性或者方法或者函数判断: "),a("code",[t._v("in")])]),t._v(" "),a("li",[t._v("实例判断: "),a("code",[t._v("instanceof")])]),t._v(" "),a("li",[t._v("字面量相等判断: "),a("code",[t._v("==")]),t._v(" "),a("code",[t._v("===")]),t._v(" "),a("code",[t._v("!=")]),t._v(" "),a("code",[t._v("!==")])])]),t._v(" "),a("h2",{attrs:{id:"interface接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#interface接口"}},[t._v("#")]),t._v(" "),a("code",[t._v("interface")]),t._v("接口")]),t._v(" "),a("p",[t._v("接口 -> ts最重要的概念->定义任意的结构或者类型")]),t._v(" "),a("h2",{attrs:{id:"泛型-t"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#泛型-t"}},[t._v("#")]),t._v(" 泛型"),a("code",[t._v("<T>")])]),t._v(" "),a("h3",{attrs:{id:"约束泛型-t-extends"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#约束泛型-t-extends"}},[t._v("#")]),t._v(" 约束泛型"),a("code",[t._v("<T extends >")])]),t._v(" "),a("p",[t._v("让传入类型满足特定条件")]),t._v(" "),a("h3",{attrs:{id:"泛型在类和接口中的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#泛型在类和接口中的使用"}},[t._v("#")]),t._v(" 泛型在类和接口中的使用")]),t._v(" "),a("h2",{attrs:{id:"其他"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[t._v("#")]),t._v(" 其他")]),t._v(" "),a("h3",{attrs:{id:"类型别名-type"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型别名-type"}},[t._v("#")]),t._v(" 类型别名 "),a("code",[t._v("type")])]),t._v(" "),a("p",[t._v("为繁杂的类型创建一个简单的写法")]),t._v(" "),a("h3",{attrs:{id:"字面量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字面量"}},[t._v("#")]),t._v(" 字面量")]),t._v(" "),a("p",[t._v("只能是原始数据类型")]),t._v(" "),a("h3",{attrs:{id:"交叉类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#交叉类型"}},[t._v("#")]),t._v(" 交叉类型 "),a("code",[t._v("&")])]),t._v(" "),a("h2",{attrs:{id:"声明文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#声明文件"}},[t._v("#")]),t._v(" 声明文件")]),t._v(" "),a("h2",{attrs:{id:"other"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#other"}},[t._v("#")]),t._v(" other")]),t._v(" "),a("h3",{attrs:{id:"静态属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#静态属性"}},[t._v("#")]),t._v(" 静态属性")]),t._v(" "),a("h4",{attrs:{id:"区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#区别"}},[t._v("#")]),t._v(" 区别")]),t._v(" "),a("h5",{attrs:{id:"对象属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象属性"}},[t._v("#")]),t._v(" 对象属性")]),t._v(" "),a("h5",{attrs:{id:"静态属性-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#静态属性-2"}},[t._v("#")]),t._v(" 静态属性")]),t._v(" "),a("p",[t._v("static")]),t._v(" "),a("h4",{attrs:{id:"分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分类"}},[t._v("#")]),t._v(" 分类")]),t._v(" "),a("h4",{attrs:{id:"静态引用属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#静态引用属性"}},[t._v("#")]),t._v(" 静态引用属性")]),t._v(" "),a("h4",{attrs:{id:"静态基本类型属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#静态基本类型属性"}},[t._v("#")]),t._v(" 静态基本类型属性")]),t._v(" "),a("h4",{attrs:{id:"源码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#源码"}},[t._v("#")]),t._v(" 源码")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//TS类 双重性质  即是类型【new实例时TS类是类型】 当用TS类直接获取属性时就是对象")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//JS函数 双重性质  即是类型【new实例时JS函数也是类型】 当用JS类直接获取属性时就是对象")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])])])}),[],!1,null,null,null);a.default=e.exports}}]);