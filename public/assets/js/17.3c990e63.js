(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{608:function(e,_,t){"use strict";t.r(_);var v=t(1),n=Object(v.a)({},(function(){var e=this,_=e._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("h2",{attrs:{id:"为什么学习csharp"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#为什么学习csharp"}},[e._v("#")]),e._v(" 为什么学习CSharp")]),e._v(" "),_("p",[e._v("最近一直在找前端方向的工作，奈何一直找不到[哭]。现实的重压到了我的头上，焦虑焦虑焦虑。有时候想想又还好，有时候又很焦虑。大一的时候学习的CSharp+Unity本来想一直坚持下去，但是之后被ShaderLab以及美术、建模啥的啥的劝退，然后学习了前端，学了一年自信了不少，结果找不到工作又给我打回去了[哭]。目前想的是把这两结合起来吧。")]),e._v(" "),_("p",[e._v(":::为什么不学Java？")]),e._v(" "),_("p",[e._v("​\t太卷了，太卷了。Java比前端还卷我不想去蹭")]),e._v(" "),_("p",[e._v(":::")]),e._v(" "),_("h2",{attrs:{id:"类型和变量"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#类型和变量"}},[e._v("#")]),e._v(" 类型和变量")]),e._v(" "),_("p",[e._v("类型定义 C# 中的任何数据的结构和行为。 类型的声明可以包含其成员、基类型、它实现的接口和该类型允许的操作。 变量是用于引用特定类型的实例的标签。")]),e._v(" "),_("p",[e._v("C# 有两种类型："),_("em",[e._v("值类型")]),e._v("和"),_("em",[e._v("引用类型")]),e._v("。 值类型的变量直接包含它们的数据。 引用类型的变量存储对数据（称为“对象”）的引用。 对于引用类型，两个变量可以引用同一个对象；对一个变量执行的运算可能会影响另一个变量引用的对象。 借助值类型，每个变量都有自己的数据副本；因此，对一个变量执行的运算不会影响另一个变量（"),_("code",[e._v("ref")]),e._v(" 和 "),_("code",[e._v("out")]),e._v(" 参数变量除外）。")]),e._v(" "),_("p",[e._v("标识符是变量名称。 标识符是不包含任何空格的 unicode 字符序列。 如果标识符的前缀为 "),_("code",[e._v("@")]),e._v("，则该标识符可以是 C# 保留字。 在与其他语言交互时，使用保留字作为标识符很有用。")]),e._v(" "),_("p",[e._v("C# 的值类型进一步分为：简单类型、枚举类型、结构类型、可以为 null 的值类型和元组值类型。 C# 引用类型又细分为类类型、接口类型、数组类型和委托类型。")]),e._v(" "),_("p",[e._v("以下大纲概述了 C# 的类型系统。")]),e._v(" "),_("ul",[_("li",[e._v("值类型\n"),_("ul",[_("li",[e._v("简单类型\n"),_("ul",[_("li",[_("a",{attrs:{href:"https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/builtin-types/integral-numeric-types",target:"_blank",rel:"noopener noreferrer"}},[e._v("有符号整型"),_("OutboundLink")],1),e._v("："),_("code",[e._v("sbyte")]),e._v("、"),_("code",[e._v("short")]),e._v("、"),_("code",[e._v("int")]),e._v("、"),_("code",[e._v("long")])]),e._v(" "),_("li",[_("a",{attrs:{href:"https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/builtin-types/integral-numeric-types",target:"_blank",rel:"noopener noreferrer"}},[e._v("无符号整型"),_("OutboundLink")],1),e._v("："),_("code",[e._v("byte")]),e._v("、"),_("code",[e._v("ushort")]),e._v("、"),_("code",[e._v("uint")]),e._v("、"),_("code",[e._v("ulong")])]),e._v(" "),_("li",[_("a",{attrs:{href:"https://learn.microsoft.com/zh-cn/dotnet/standard/base-types/character-encoding-introduction",target:"_blank",rel:"noopener noreferrer"}},[e._v("Unicode 字符"),_("OutboundLink")],1),e._v("："),_("code",[e._v("char")]),e._v("，表示 UTF-16 代码单元")]),e._v(" "),_("li",[_("a",{attrs:{href:"https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/builtin-types/floating-point-numeric-types",target:"_blank",rel:"noopener noreferrer"}},[e._v("IEEE 二进制浮点"),_("OutboundLink")],1),e._v("："),_("code",[e._v("float")]),e._v("、"),_("code",[e._v("double")])]),e._v(" "),_("li",[_("a",{attrs:{href:"https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/builtin-types/floating-point-numeric-types",target:"_blank",rel:"noopener noreferrer"}},[e._v("高精度十进制浮点数"),_("OutboundLink")],1),e._v("："),_("code",[e._v("decimal")])]),e._v(" "),_("li",[e._v("布尔值："),_("code",[e._v("bool")]),e._v("，表示布尔值（"),_("code",[e._v("true")]),e._v(" 或 "),_("code",[e._v("false")]),e._v("）")])])]),e._v(" "),_("li",[e._v("枚举类型\n"),_("ul",[_("li",[_("code",[e._v("enum E {...}")]),e._v(" 格式的用户定义类型。 "),_("code",[e._v("enum")]),e._v(" 类型是一种包含已命名常量的独特类型。 每个 "),_("code",[e._v("enum")]),e._v(" 类型都有一个基础类型（必须是八种整型类型之一）。 "),_("code",[e._v("enum")]),e._v(" 类型的值集与基础类型的值集相同。")])])]),e._v(" "),_("li",[e._v("结构类型\n"),_("ul",[_("li",[e._v("格式为 "),_("code",[e._v("struct S {...}")]),e._v(" 的用户定义类型")])])]),e._v(" "),_("li",[e._v("可以为 null 的值类型\n"),_("ul",[_("li",[e._v("值为 "),_("code",[e._v("null")]),e._v(" 的其他所有值类型的扩展")])])]),e._v(" "),_("li",[e._v("元组值类型\n"),_("ul",[_("li",[e._v("格式为 "),_("code",[e._v("(T1, T2, ...)")]),e._v(" 的用户定义类型")])])])])]),e._v(" "),_("li",[e._v("引用类型\n"),_("ul",[_("li",[e._v("类类型\n"),_("ul",[_("li",[e._v("其他所有类型的最终基类："),_("code",[e._v("object")])]),e._v(" "),_("li",[_("a",{attrs:{href:"https://learn.microsoft.com/zh-cn/dotnet/standard/base-types/character-encoding-introduction",target:"_blank",rel:"noopener noreferrer"}},[e._v("Unicode 字符串"),_("OutboundLink")],1),e._v("："),_("code",[e._v("string")]),e._v("，表示 UTF-16 代码单元序列")]),e._v(" "),_("li",[e._v("格式为 "),_("code",[e._v("class C {...}")]),e._v(" 的用户定义类型")])])]),e._v(" "),_("li",[e._v("接口类型\n"),_("ul",[_("li",[e._v("格式为 "),_("code",[e._v("interface I {...}")]),e._v(" 的用户定义类型")])])]),e._v(" "),_("li",[e._v("数组类型\n"),_("ul",[_("li",[e._v("一维、多维和交错。 例如："),_("code",[e._v("int[]")]),e._v("、"),_("code",[e._v("int[,]")]),e._v(" 和 "),_("code",[e._v("int[][]")])])])]),e._v(" "),_("li",[e._v("委托类型\n"),_("ul",[_("li",[e._v("格式为 "),_("code",[e._v("delegate int D(...)")]),e._v(" 的用户定义类型")])])])])])])])}),[],!1,null,null,null);_.default=n.exports}}]);